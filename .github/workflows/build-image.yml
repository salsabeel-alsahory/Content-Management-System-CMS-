name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v3

    - name: Set image version (tag)
      id: image_version
      run: echo "gitsha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ghcr.io/salsabeel-alsahory/contentmanagementsystem:${{ steps.image_version.outputs.gitsha }}
    - name: Publish docker image
      run: docker push ghcr.io/salsabeel-alsahory/contentmanagementsystem:${{ steps.image_version.outputs.gitsha }}
    - name: Get EC2 Instance IPs
      id: instance_ips
      run: |
        instances=$(aws ec2 describe-instances --filters 'Name=tag:aws:autoscaling:groupName,Values=suzansal-sg' --query 'Reservations[*].Instances[*].PublicIpAddress' --output json | jq --compact-output 'flatten')
        echo "ips=$instances" >> $GITHUB_OUTPUT
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        AWS_REGION: us-east-1
  deploy:
    needs: ["build"]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        ip: ${{ fromJson(needs.build.outputs.ec2_ips) }}
    steps:
      - name: configure docker host
        uses: khaledez/configure-docker-host@v2
        with:
          host: ${{ matrix.ip }}
          user: github
          ssh-private-key: ${{ secrets.DEPLOYMENT_KEY }}
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: salsabeel-alsahory
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: deploy
        run: docker-compose -f docker-compose-prod.yml up -d
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          GIT_VERSION: ${{ steps.image_version.outputs.gitsha }}
          DB_HOST: ${{ secrets.DB_HOST }}
      - name: print logs
        if: always() # This step will be executed even if previous steps fails
        run: docker-compose logs
